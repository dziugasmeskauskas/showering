{"version":3,"sources":["soundsService.js","component/list-item.jsx","App.js","serviceWorker.js","index.js"],"names":["soundService","Object","classCallCheck","this","url","data","fetch","method","headers","Content-Type","body","JSON","stringify","id","concat","ListItem","props","_this","possibleConstructorReturn","getPrototypeOf","call","changeMode","mode","setState","update","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","onUpdate","file","state","value","view","stop","edit","delete","onDelete","attributes","name","_this2","react_default","createElement","className","filename","onClick","bind","type","onChange","_ref2","target","Component","App","upload","reader","FileReader","readAsDataURL","onload","post","result","onerror","isUploading","getItems","service","get","then","response","json","_ref","files","console","log","base64","payload","sound","content_type","ok","toast","error","forEach","_this3","react_spinners","sizeUnit","size","color","loading","es","onDrop","style","width","border","borderRadius","map","component_list_item","key","lib","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.945c1b82.chunk.js","sourcesContent":["export default class soundService {\n\n  constructor() {\n    this.url = 'https://sound-sequencer.herokuapp.com/sounds';\n  }\n\n  post(data) {\n    return fetch(this.url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n\n      },\n      body: JSON.stringify(data)\n    });\n  }\n\n  get() {\n    return fetch(this.url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n    });\n  }\n\n  delete(id) {\n    return fetch(`${this.url}/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n    });\n  }\n\n  update(id, data) {\n    return fetch(`${this.url}/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify(data)\n    });\n  }\n\n}","import React, { Component } from 'react'\nimport { toast } from 'react-toastify'\n\nimport './list-item.css'\n\nclass ListItem extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mode: 'view',\n      value: this.props.file.attributes.data.name || ''\n    }\n  }\n\n  changeMode = mode => this.setState({ mode })\n\n  update = async () => {\n    await this.props.onUpdate(this.props.file.id, this.state.value)\n    this.view()\n  }\n\n  edit = () => this.changeMode('edit')\n\n  view = () => this.changeMode('view')\n\n  delete = id => this.props.onDelete(id)\n\n  render() {\n    return (\n      this.state.mode === 'view'\n      ? <li>\n          <div className=\"info\">\n            <span>Name: {this.props.file.attributes.data.name}</span>\n            <small>File name: {this.props.file.attributes.filename}</small>\n          </div>\n          <div className=\"actions\">\n            <button onClick={this.edit}>Edit</button>\n            <button onClick={this.delete.bind(null, this.props.file.id)}>Delete</button>\n          </div>\n        </li>\n      : <li>\n          <div>\n            <span>Name: </span><input type=\"text\" value={this.state.value} onChange={({ target: { value }}) => this.setState({ value: value })} />\n          </div>\n          <div className=\"actions\">\n            <button onClick={this.update}>Save</button>\n            <button onClick={this.view}>Cancel</button>\n          </div>\n        </li>\n    )\n  }\n}\n\nexport default ListItem\n","import React, { Component } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Dropzone from 'react-dropzone'\nimport soundService from './soundsService';\nimport BeatLoader from 'react-spinners/BeatLoader';\nimport ListItem from './component/list-item';\n\nimport './App.css';\nimport { ScaleLoader } from 'react-spinners';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.service = new soundService();\n    this.state = {\n      files: [],\n      isUploading: false\n    }\n  }\n\n  onDrop(files) {\n    files.forEach(file => {\n      this.setState({ isUploading: true });\n      this.upload(file);\n    });\n  }\n\n  componentDidMount() {\n    this.getItems();\n  }\n\n  upload = (file) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      this.post(reader.result, file);\n    };\n    reader.onerror = () => {\n      this.setState({ isUploading: false })\n    };\n  }\n\n  getItems = () => {\n    this.service.get().then(response => response.json())\n    .then(({ data }) => {\n      this.setState({files: data})\n      console.log(this.state);\n    })\n  }\n\n  post = (base64, file) => {\n    const payload = {\n      sound: {\n        data: base64,\n        content_type: file.type,\n        filename: file.name\n      }\n    };\n\n    this.service.post(payload).then(response => {\n      if(response.ok) {\n        this.setState({ isUploading: false });\n        return this.getItems();\n      }\n      toast.error(\"Upload failed !\");\n      this.setState({ isUploading: false })\n    });\n  }\n\n  delete = id => {\n    this.service.delete(id).then(response => {\n      if(response.ok) {\n        return this.getItems();\n      }\n      toast.error(\"Delete failed !\");\n    });\n  }\n\n  update = (id, name) => {\n    const payload = {\n      sound: {\n        data: {\n          name: name\n        }\n      }\n    }\n    this.service.update(id, payload).then(response => {\n      if(response.ok) {\n        return this.getItems();\n      }\n      toast.error(\"Update failed !\");\n    });\n  }\n\n  render() {\n    const { isUploading } = this.state;\n    return (\n      <div className=\"dropzone\">\n        <div className={`cover ${isUploading ? 'show' : ''}`}>\n          <span className=\"text\"> File uploading! <br/> Please wait</span>\n          <ScaleLoader\n            sizeUnit={\"px\"}\n            size={400}\n            color={'white'}\n            loading={true}\n          />\n        </div>\n        <Dropzone onDrop={this.onDrop.bind(this)}\n          style={{\n            width: 500,\n            border: '1px solid rgba(0, 0, 0, 0.5)',\n            borderRadius: 11\n          }}>\n          <h1>Drop the sounds !</h1>\n        </Dropzone>\n\n\n        <h2>Dropped files</h2>\n        <ul>\n          {\n            this.state.files.map(file => <ListItem key={file.id} file={file} onDelete={this.delete} onUpdate={this.update} />)\n          }\n        </ul>\n\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}